buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
    }
}

plugins {
	id 'org.springframework.boot' version '2.6.7'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
    id 'com.google.protobuf' version '0.8.18'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.2'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'

	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	testCompileOnly 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // https://mvnrepository.com/artifact/io.github.lognet/grpc-spring-boot-starter
    implementation 'io.github.lognet:grpc-spring-boot-starter:4.6.0'
    // https://mvnrepository.com/artifact/io.grpc/grpc-testing
    testImplementation 'io.grpc:grpc-testing:1.46.0'


    // firestore 関係
    implementation 'com.google.cloud:spring-cloud-gcp-starter-firestore:3.2.1'
    implementation 'com.google.cloud:spring-cloud-gcp-starter:3.2.1'

    // static mock
    // https://mvnrepository.com/artifact/org.mockito/mockito-inline
    testImplementation 'org.mockito:mockito-inline:4.5.1'

}

tasks.named('test') {
	useJUnitPlatform()
}


// 下記追加
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.19.2"
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.45.0'
        }
        doc {
            artifact = "io.github.pseudomuto:protoc-gen-doc:1.5.1"
            // path = "$projectDir/proto-gen-doc"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
        all().each { task ->
            task.plugins {
                doc {
                    option 'html,index.html'
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

task cleanProtoGen{
    doFirst{
           delete("$projectDir/src/main/protogen")
    }
}

clean.dependsOn cleanProtoGen

// jacoco 設定
jacoco {
    toolVersion = "0.8.8"
}
tasks.jacocoTestReport {
    // tests are required to run before generating the report
    dependsOn(tasks.test)
}
// jacoco 設定

// UT setting
task startMockFirestore {
  doFirst {
    ext.process = new ProcessBuilder()
      .directory(projectDir)
      .inheritIO()
      .command("sh/start-firestore-emulator.sh")
      .start()
      .waitFor()
    }
}
tasks.test.dependsOn(startMockFirestore)

task stopMockFirestore(type: Exec) {
  executable "sh/stop-firestore-emulator.sh"
}
test.finalizedBy(stopMockFirestore)
